" Leader (this needs to be done before we set easymotion)
let mapleader = " "

" Options
set NERDTree
set ReplaceWithRegister
set clipboard+=unnamed
set commentary
" set easymotion
set highlightedyank
set hlsearch
set ideajoin
set ideamarks
set ignorecase
set multiple-cursors
set number
set relativenumber
set showmode
set smartcase
set surround
set which-key

set timeoutlen=10000

" Selected Intellimacs Modules
source ~/.intellimacs/spacemacs.vim
source ~/.intellimacs/extra.vim
source ~/.intellimacs/major.vim
source ~/.intellimacs/hybrid.vim

" remaps
inoremap jj <Esc>
inoremap kk <Esc>

nnoremap gD        :action SmartSearchAction<CR>
nnoremap gh        :action QuickImplementations<CR>
nnoremap <space>jl :action AceLineAction<CR>
nnoremap <space>jw :action AceWordAction<CR>
nnoremap <space>jv :action AceTargetAction<CR>
nnoremap f         :action AceWordForwardAction<CR>
nnoremap F         :action AceWordBackwardsAction<CR>
nnoremap J         :action MoveLineDown<CR>
vnoremap J         :action MoveLineDown<CR>
nnoremap K         :action MoveLineUp<CR>
vnoremap K         :action MoveLineUp<CR>
nnoremap <C-j>     :action EditorCloneCaretBelow<CR>
nnoremap <C-k>     :action EditorCloneCaretAbove<CR>
nnoremap <A-j>     :action EditorDuplicateLines<CR>
vnoremap <A-j>     :action EditorDuplicateLines<CR>
nnoremap gb        :action SelectNextOccurrence<CR>
nnoremap <C-n>     :action SelectNextOccurrence<CR>
nnoremap gB        :action SelectAllOccurrences<CR>
vnoremap gb        :action SelectNextOccurrence<CR>
vnoremap <C-n>     :action SelectNextOccurrence<CR>
vnoremap gB        :action SelectAllOccurrences<CR>
nnoremap <C-s>     :action ReformatCode<CR>:action SaveAll<CR>
nnoremap gr        :action ShowUsages<Cr>

" Blackhole everything, make a 'move'
nnoremap d "_d
nnoremap dd "_dd
nnoremap D "_D
nnoremap c "_c
nnoremap C "_C
nnoremap x "_x
nnoremap X "_X
nnoremap m d
vnoremap m d
nnoremap mm d
nnoremap M D

" Git-related
nnoremap <leader>gn :action Diff.NextChange<CR>
nnoremap <leader>gp :action Diff.PrevChange<CR>

" Jumping to symbols and stuff, in current file and across project
nnoremap <leader>ji :action FileStructurePopup<CR>
vnoremap <leader>ji :action FileStructurePopup<CR>
nnoremap <leader>jI :action GotoSymbol<CR>
vnoremap <leader>jI :action GotoSymbol<CR>
nnoremap <leader>jr :action FindUsages<CR>

" Focus next window
nnoremap <leader>w<TAB> :action NextSplitter<CR>
vnoremap <leader>w<TAB> <Esc>:action NextSplitter<CR>

" Formatting code
nnoremap <leader>f= :action ReformatCode<CR>
vnoremap <leader>f= :action ReformatCode<CR>

" Configuration-related
nnoremap <leader>feR :action InvalidateCaches<CR>
nnoremap <leader>fed :edit ~/.ideavimrc<CR>
nnoremap <leader>feD :action ShowSettings<CR>

" NERDTree Remaps
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapOpenRecursively='L'
let g:NERDTreeMapCloseDir='h'
let g:NERDTreeMapCloseChildren='H'

" which-key
let g:WhichKey_FontFamily    = 'JetBrains Mono'
let g:WhichKey_FontSize      = 16
let g:WhichKeyDesc_comment   = "<leader>; +Comment"
let g:WhichKeyDesc_bookmarks = "<leader>B +Bookmarks"
let g:WhichKeyDesc_color     = "<leader>C +Color"
let g:WhichKeyDesc_frame     = "<leader>F +Frame"
let g:WhichKeyDesc_run       = "<leader>R +Run"
let g:WhichKeyDesc_uitoggle  = "<leader>T +UIToggle"
let g:WhichKeyDesc_actions   = "<leader>a +Actions"
let g:WhichKeyDesc_buffers   = "<leader>b +Buffers"
let g:WhichKeyDesc_comment   = "<leader>c +Compile/comment"
let g:WhichKeyDesc_errors    = "<leader>e +Errors"
let g:WhichKeyDesc_files     = "<leader>f +Files"
let g:WhichKeyDesc_git       = "<leader>g +Git"
let g:WhichKeyDesc_help      = "<leader>h +Help"
let g:WhichKeyDesc_insert    = "<leader>i +Insert"
let g:WhichKeyDesc_jump      = "<leader>j +Jump"
let g:WhichKeyDesc_major     = "<leader>m +Major"
let g:WhichKeyDesc_something = "<leader>n +Something"
let g:WhichKeyDesc_project   = "<leader>p +Project"
let g:WhichKeyDesc_quit      = "<leader>q +Quit"
let g:WhichKeyDesc_replace   = "<leader>r +Replace"
let g:WhichKeyDesc_search    = "<leader>s +Search"
let g:WhichKeyDesc_toggles   = "<leader>t +Toggles"
let g:WhichKeyDesc_window    = "<leader>w +Window"
let g:WhichKeyDesc_text      = "<leader>x +Text"
let g:WhichKeyDesc_zoom      = "<leader>z +Zoom"
