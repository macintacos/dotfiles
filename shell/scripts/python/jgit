#!/usr/bin/env python

import re
import sys
from logging import Logger
from typing import Optional

import click
from rich.console import Console
from rich.prompt import Confirm, Prompt
from sh import Command, ErrorReturnCode
from sh.contrib import git  # type: ignore

import _log  # isort: skip


log: Logger = _log.logging.getLogger(__name__)
console = Console()
prompt = Prompt()
confirm = Confirm()

# sh commands
awk = Command("awk")


@click.group()
def branch_ops() -> None:
    """This is used to logically group the branch-specific commands."""


@branch_ops.group()
def branch() -> None:
    """Branch-specific commands that do things that I wanna do to branches."""


@branch.command()
def delete() -> None:
    """Delete branch operations that are tailored to my needs."""
    log.info("Checking if there are any branches locally that are deleted on remote...")

    git.fetch()  # Make sure we're up to date
    current_branches = git(
        "for-each-ref",
        "--format",
        "'%(refname) %(upstream:track)'",
        "refs/heads",
    )

    filtered_branches: list[str] = [
        branch.strip() for branch in current_branches if "arm" in branch
    ]

    # Exit early if there's nothing to do
    if len(filtered_branches) == 0:
        log.info("No branches found to delete. Not doing anything.")
        sys.exit(0)

    log.warning(f"We will be deleting the following branches: {filtered_branches}")

    do_delete = confirm.ask("Are you sure you want to delete these local branches?")

    # User cancelled the operation
    if not do_delete:
        log.info("Aborted the branch deletion operation.")
        sys.exit(1)

    log.info("Cool.")
    log.info(f"Deleting the following branches: {filtered_branches}")

    for branch in filtered_branches:
        branch = branch.strip("'")
        log.info(f"Running delete for: {branch}")

    # TODO: Actually start deleting things
    log.info("Branches deleted.")
    sys.exit(0)


@branch.command()
def create() -> None:
    """Stub for a 'create' command that I haven't actually done yet."""
    log.error("Boo!")


cli = click.CommandCollection(sources=[branch_ops])

if __name__ == "__main__":
    cli()
